/*
 * generated by Xtext
 */
package io.pelle.mango.dsl.generator.server.service

import com.google.inject.Inject
import io.pelle.mango.dsl.generator.client.ClientNameUtils
import io.pelle.mango.dsl.generator.client.web.BaseServices
import io.pelle.mango.dsl.generator.server.ServerAttributeUtils
import io.pelle.mango.dsl.generator.server.ServerNameUtils
import io.pelle.mango.dsl.generator.util.JvmTypeUtils
import io.pelle.mango.dsl.mango.Service
import io.pelle.mango.dsl.mango.ServiceMethod
import io.pelle.mango.dsl.mango.ValueObject
import org.eclipse.xtext.xbase.compiler.ImportManager
import java.util.Date

class RestServices extends BaseServices {

	@Inject
	extension ServerAttributeUtils

	@Inject
	extension JvmTypeUtils

	@Inject
	extension ServerNameUtils serverNameUtils

	@Inject
	ClientNameUtils clientNameUtils

	def restServiceControllerRequetVO(Service service, ServiceMethod method) '''
	package «service.packageName»;
	
	«val importManager = new ImportManager(true)»
	«FOR i : importManager.imports»
	import «i»;
	«ENDFOR»

	public class «restControllerRequestVOName(service, method)»«method.methodTypeParameter»  {
		«FOR parameter : method.params»
			«attribute(parameter.parameterType.qualifiedName, parameter.name)»
			«getter(parameter.parameterType.qualifiedName, parameter.name)»
			«setter(parameter.parameterType.qualifiedName, parameter.name)»
		«ENDFOR»
	}
	'''

	def restServiceController(Service service) '''
		
		package «service.packageName»;

		«val importManager = new ImportManager(true)»
		«FOR i : importManager.imports»
		import «i»;
		«ENDFOR»
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;
		import org.springframework.web.bind.annotation.RequestParam;
		import org.springframework.web.bind.annotation.RequestBody;
		import org.springframework.web.bind.annotation.PathVariable;
		import org.springframework.web.bind.annotation.ResponseBody;
		import org.springframework.transaction.annotation.Transactional;
		
		@SuppressWarnings("all")
		@org.springframework.web.bind.annotation.RestController
		@org.springframework.web.bind.annotation.RequestMapping("«service.restMapping»")
		public class «service.restControllerName»  {
		
			@org.springframework.beans.factory.annotation.Autowired
			private «clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.variableName»;
			
			public void «service.setterName»(«clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.variableName»)
			{
				this.«service.variableName» = «service.variableName»;
			}
		
			«FOR method : service.remoteMethods»

				«IF method.params.hasOnlyTypes( #[String, Long, Integer, Date ] )»
					@RequestMapping(value = "«restMapping(service, method)»", produces="application/json", method = RequestMethod.GET)
					@ResponseBody
					@Transactional
					public «method.methodReturn» «uniqueMethodName(service, method)»Get(«FOR parameter : method.params SEPARATOR ", "»@RequestParam("«parameter.name»") «parameter.parameterType.qualifiedName» «parameter.name» «ENDFOR»«IF method.params.size > 0»,«ENDIF» javax.servlet.http.HttpServletResponse httpServletResponse, javax.servlet.http.HttpServletRequest httpServletRequest) {
						«IF !method.returnsVoid»return («method.returnType.qualifiedName»)«ENDIF»«method.methodName»(«FOR parameter : method.params SEPARATOR ", "»«parameter.name»«ENDFOR»«IF method.params.size > 0»,«ENDIF» httpServletResponse, httpServletRequest);
					}
				«ENDIF»
			
			
				public «method.methodReturn» «method.methodName»(«method.params.methodParameters»«IF !method.params.isEmpty», «ENDIF»javax.servlet.http.HttpServletResponse httpServletResponse, javax.servlet.http.HttpServletRequest httpServletRequest) {
					«IF !method.returnsVoid»return («method.returnType.qualifiedName»)«ENDIF» this.«service.variableName».«method.name.toFirstLower»(«FOR parameter : method.params SEPARATOR ", "»«parameter.name»«ENDFOR»);
				}


				@RequestMapping(value = "«restMapping(service, method)»", produces="application/json", method = RequestMethod.POST, consumes = "application/json")
				@ResponseBody
				@Transactional
				«IF method.params.size == 1 && method.params.hasOnlyType(typeof(ValueObject))»
					public «method.methodReturn» «uniqueMethodName(service, method)»PostRequestBody(@RequestBody «method.params.get(0).parameterType.qualifiedName» requestBody, javax.servlet.http.HttpServletResponse httpServletResponse, javax.servlet.http.HttpServletRequest httpServletRequest) {
						«IF !method.returnsVoid»return («method.returnType.qualifiedName»)«ENDIF»«method.methodName»(requestBody, httpServletResponse, httpServletRequest);
					}
				«ELSE»
					public «method.methodReturn» «uniqueMethodName(service, method)»PostRequestBody(«IF !method.params.isEmpty»@RequestBody «restControllerRequestVOName(service, method)» requestBody, «ENDIF»javax.servlet.http.HttpServletResponse httpServletResponse, javax.servlet.http.HttpServletRequest httpServletRequest) {
						«IF !method.returnsVoid»return («method.returnType.qualifiedName»)«ENDIF» «method.methodName»(«FOR parameter : method.params SEPARATOR ","»requestBody.«parameter.name.getterName»()«ENDFOR»«IF !method.params.isEmpty», «ENDIF»httpServletResponse, httpServletRequest);
					}
				«ENDIF»
			«ENDFOR»
		}
	'''

	def methodReturn(Service service, ServiceMethod method) '''
		«IF !method.returnsVoid»return«ENDIF» this.«service.variableName».«method.name.toFirstLower»(«FOR parameter : method.params SEPARATOR ","»«parameter.name»«ENDFOR»);
	'''

}

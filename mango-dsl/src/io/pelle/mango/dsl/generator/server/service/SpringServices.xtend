/*
 * generated by Xtext
 */
package io.pelle.mango.dsl.generator.server.service

import com.google.inject.Inject
import io.pelle.mango.dsl.generator.client.ClientNameUtils
import io.pelle.mango.dsl.generator.client.web.GWTServices
import io.pelle.mango.dsl.generator.server.ServerNameUtils
import io.pelle.mango.dsl.mango.Model
import io.pelle.mango.dsl.mango.Service
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

class SpringServices {

	@Inject
	extension ServiceNameUtils

	@Inject
	extension ServerNameUtils

	@Inject
	ClientNameUtils clientNameUtils
	
	@Inject
	extension GWTServices
	
	//------------------------------------------------
	// gwt remote service locator
	//------------------------------------------------
	def gwtAsyncAdapterRemoteServiceLocator(Model model) '''
		package «model.modelPackageName»;
		
		public class «model.gwtAsyncAdapterRemoteServiceLocatorName» implements «clientNameUtils.gwtRemoteServiceLocatorInterfaceFullQualifiedName(model)» {
		
		    public «model.gwtAsyncAdapterRemoteServiceLocatorName»() {
		    }
		
			«FOR service : model.eAllContents.toIterable.filter(Service)» 
			@org.springframework.beans.factory.annotation.Autowired
			@org.springframework.beans.factory.annotation.Qualifier("«service.gwtAsyncAdapterBeanName»")
			private «service.gwtAsyncAdapterFullQualifiedName» «service.serviceAttributeName»;
			
			public «clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service)» get«service.serviceName»() {
				return «service.serviceAttributeName»;
			}
			
			public void set«service.serviceName»(«service.gwtAsyncAdapterFullQualifiedName» «service.serviceAttributeName») {
				this.«service.serviceAttributeName» = «service.serviceAttributeName»;
			}
			«ENDFOR»
		}
	'''
	
	
	def gwtRemoteServiceAsyncAdapter(Service service) '''
		package «service.packageName»;
		
		public class «service.gwtAsyncAdapterName» implements «clientNameUtils.gwtAsyncServiceInterfaceFullQualifiedName(service)» {

			@org.springframework.beans.factory.annotation.Autowired
			private «clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.serviceSpringName»;
			
			«FOR method : service.remoteMethods»
			public «method.serviceMethodAsync» {
				try {
				«IF !method.returnsVoid»
					callback.onSuccess((«method.returnType.qualifiedName»)this.«service.name.toFirstLower()».«method.name.toFirstLower()»(«FOR parameter : method.params SEPARATOR  ", "»«parameter.name»«ENDFOR»));
				«ELSE»
					this.«service.name.toFirstLower()».«method.name.toFirstLower()»(«FOR parameter : method.params SEPARATOR  ", "»«parameter.name»«ENDFOR»);
					callback.onSuccess(null);
				«ENDIF»
				} catch (Exception e) {
					callback.onFailure(e);
				}
			}
			«ENDFOR»
		
			public void set«service.serviceName»(«clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.name.toFirstLower()») {
				this.«service.name.toFirstLower()» = «service.name.toFirstLower()»;
			}
		
		}
	'''
	
	//------------------------------------------------
	// remote service locator
	//------------------------------------------------
	def remoteServiceLocator(Model model) '''
		package «model.modelPackageName»;
		
		public class «model.remoteServiceLocatorName» implements «model.remoteServiceLocatorInterfaceName» {
		
		    public «model.remoteServiceLocatorName»() {
		    }
		
			«FOR service : model.eAllContents.toIterable.filter(Service)» 
				@org.springframework.beans.factory.annotation.Autowired
				private «clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.serviceName»;

				public «clientNameUtils.serviceInterfaceFullQualifiedName(service)» get«service.serviceName»() {
					return «service.serviceName»;
				}
				
				public void set«service.serviceName»(«clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.serviceName») {
					this.«service.serviceName» = «service.serviceName»;
				}
			«ENDFOR»
		}
	'''

	def remoteServiceLocatorInterface(Model model) '''
		package «model.modelPackageName»;
		
		public interface «model.remoteServiceLocatorInterfaceName» {
			«FOR service : model.eAllContents.toIterable.filter(Service)» 
			«clientNameUtils.serviceInterfaceFullQualifiedName(service)» get«service.serviceName»();
			«ENDFOR»
		}
	'''
	
	def springServices(Model model) '''
		package «model.springServicesApplicationContextPackageName»;
		
		@«Configuration.name»
		public class «model.springServicesApplicationContextName» {
			
			«FOR service: model.eAllContents.toIterable.filter(Service)»
			@«Bean.name»
			public «clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.serviceSpringName»() throws java.lang.Exception {
				return («clientNameUtils.serviceInterfaceFullQualifiedName(service)») org.springframework.beans.BeanUtils.instantiateClass(Class.forName("«service.serviceImplFullQualifiedName»"));
			}
			
			@«Bean.name»
			public «service.gwtAsyncAdapterFullQualifiedName» «service.gwtAsyncAdapterBeanName»() {
				return new «service.gwtAsyncAdapterFullQualifiedName»();
			}
			«ENDFOR»

			@«Bean.name»
			public «model.remoteServiceLocatorFullQualifiedName» «model.remoteServiceLocatorName.toFirstLower»() {
				return new «model.remoteServiceLocatorFullQualifiedName»();
			}

			@«Bean.name»
			public «model.gwtAsyncAdapterRemoteServiceLocatorFullQualifiedName» «model.gwtAsyncAdapterRemoteServiceLocatorName.toFirstLower»() {
				return new «model.gwtAsyncAdapterRemoteServiceLocatorFullQualifiedName»();
			}

		}
	'''

	def springHttpInvokerServices(Model model) '''
		package «model.springInvokerServicesApplicationContextPackageName»;
		
		@«Configuration.name»
		public class «model.springInvokerServicesApplicationContextName» {

			«FOR service: model.eAllContents.toIterable.filter(Service)»
			@«Bean.name»
			@org.springframework.beans.factory.annotation.Autowired
			public org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter «service.serviceSpringInvokerName»(«clientNameUtils.serviceInterfaceFullQualifiedName(service)» «service.serviceSpringName») {
				
				org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter result = new org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter();

				result.setService(«service.serviceSpringName»);
				result.setServiceInterface(«clientNameUtils.serviceInterfaceFullQualifiedName(service)».class);
				
				return result;
			}
			«ENDFOR»
		}
	'''
	
	def springHttpInvokerServicesClient(Model model) '''
		package «model.springInvokerClientServicesApplicationContextPackageName»;
		
		@«Configuration.name»
		public class «model.springInvokerClientServicesApplicationContextName» {

			«FOR service: model.eAllContents.toIterable.filter(Service)»
			@«Bean.name»
			public org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean «service.serviceSpringInvokerName»() {
				org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean result = new org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean();

				result.setServiceUrl("${mango.base.remote.url}/remote/«service.serviceSpringInvokerName»");
				result.setServiceInterface(«clientNameUtils.serviceInterfaceFullQualifiedName(service)».class);
				
				return result;
			}
			«ENDFOR»
		}
	'''
}
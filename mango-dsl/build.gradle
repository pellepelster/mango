dependencies {

	compile(group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.xtext', version: versions.xtext) {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
	compile(group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.xbase', version: versions.xtext) {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
	compile(group: 'org.eclipse.xtext', name: 'org.eclipse.xtext', version: versions.xtext) {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
	compile(group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.builder.standalone', version: versions.xtext) {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
	compile(group: 'org.eclipse.xtend', name: 'org.eclipse.xtend.lib', version: versions.xtext) {
        exclude module: 'org.eclipse.xtext.dependencies'
    }
	compile 'commons-beanutils:commons-beanutils-core:1.8.3'
	compile project(':mango-client-base')
	compile project(':mango-server-base')
	
}

apply plugin: 'org.xtend.xtend'

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.xtend:xtend-gradle-plugin:0.4.8' }
}

sourceSets {

	main {
	
		java { 
			srcDirs = [ 'src/main/java', 'xtend-gen', 'src-gen' ]
	        compileClasspath += configurations.provided
		}
		resources { 
			srcDirs = [ 'src/main/resources', 'xtend-gen', 'src-gen']
		}
		
		xtendOutputDir = 'xtend-gen'
		
	}
	
	test {
	
		java {
			srcDirs = [ 'src/test/java' ]
    	    compileClasspath += configurations.provided
		}
		
		resources {
			srcDirs = [ 'src/test/resources' ]
		}
		
	}
	
}

eclipse {
	project {
		natures 'org.eclipse.xtext.ui.shared.xtextNature'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}
}

task generateXtext(type: JavaExec) {
	main = "org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher"
	//classpath = fileTree(classpath).exclude('**/system.properties')   
	classpath = configurations.compile.filter { !it.path.endsWith(".pom") }
	classpath += files('src/main/java')
	classpath += files('src/main/resources')
	//jvmArgs = ["-Xdebug", "-Xnoagent", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"]
	args = [
		"classpath:///io/pelle/mango/dsl/GenerateMango.mwe2"
	]
}

generateXtext.onlyIf { !project.hasProperty('skipGenerate') }

compileXtend.doFirst {
	def xtendOutputDir = file(sourceSets.main.xtendOutputDir)

	if(xtendOutputDir.exists() ) {
		xtendOutputDir.delete()
	}
	
	xtendOutputDir.mkdirs()
}

tasks.withType(org.xtend.gradle.tasks.XtendCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(org.xtend.gradle.tasks.XtendEclipseSettings) {
	options.xtendAsPrimaryDebugSource = true
	options.hideSyntheticVariables = false
}

task clean.doLast {
    ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
        fileset(dir: "model", includes: "**/*")
    }
}
compileXtend.dependsOn generateXtext
compileXtend.onlyIf { !project.hasProperty('skipGenerate') }

import org.apache.tools.ant.filters.ReplaceTokens

ext {
	templateOutputDir = file("${buildDir}/${projectName.toLowerCase()}")
	fullOutputDir = "${outputDir}/${projectName.toLowerCase()}"
}

repositories {

	ivy {
		name "releaseBuildRepository"
		url System.getenv("WORKSPACE") + "/mango-build/build/repository"
		layout "maven"
	}

	ivy {
		name "localDevelopmentRepository"
		url System.properties['user.home'] + "/.gradle/mango_development"
		layout "maven"
	}

    ivy {
        name "mangoCiRepository"
        url "http://zoidberg.pelle.io/~mango-ci/repository/"
        layout "maven"
	}
	
	mavenCentral()

}

configurations { 
	projectTemplate 
}

dependencies {
	projectTemplate group: 'io.pelle.mango', name: 'mango-project-template', version: '+', ext: 'zip'
}

task extractProjectTemplate(type: Copy) {
	
	templateOutputDir.deleteDir()
	templateOutputDir.mkdirs()
	into templateOutputDir

	configurations.projectTemplate.filter { 
		println "extracting ${it} to ${templateOutputDir}"
		it.toString().endsWith(".zip") 
	}.each { 
		from zipTree(it)
	}

	eachFile { details ->
		details.path = replaceFileNameTokens(details.path)
	}
	
	filter { String line ->
        "${replaceTextFileTokens(line)}"
    }	
}

task copyProjectTemplate(type: Copy) {

	def newOutputDir = file(fullOutputDir)
	newOutputDir.mkdirs()

	println "copying templates to ${newOutputDir}"
	
	into file("${newOutputDir}")
	from templateOutputDir
	exclude 'projectname*/**'
}

def replaceFileNameTokens(def tokenString)  {
	def packagePathName = packageName.replaceAll('\\.', '/')
	tokenString = tokenString.replaceAll('packagename', "${packagePathName}")
	replaceCommonTokens(tokenString)
}

def replaceTextFileTokens(def tokenString)  {
	tokenString = tokenString.replaceAll('packagename', "${packageName}")
	replaceCommonTokens(tokenString)
}

def replaceCommonTokens(def tokenString)  {
	tokenString = tokenString.replaceAll('projectname', "${projectName.toLowerCase()}")
	tokenString = tokenString.replaceAll('ProjectName', "${projectName}")
}

task createWrapper(type: Wrapper) {
    gradleVersion = '2.5'
    jarFile = file(fullOutputDir + "/gradle/wrapper/gradle-wrapper.jar")
    scriptFile = file(fullOutputDir + "/gradlew")
}

task bootstrapProjectTemplate(type: GradleBuild) {
   buildFile = file(fullOutputDir + "/${projectName.toLowerCase()}-build/build.gradle")
   tasks = ['eclipse']
}

extractProjectTemplate.dependsOn(createWrapper)
extractProjectTemplate.dependsOn(configurations.projectTemplate)
copyProjectTemplate.dependsOn(extractProjectTemplate)
bootstrapProjectTemplate.dependsOn(copyProjectTemplate)
apply plugin: 'xtext'

xtext {
	version = '2.5.3' // the current default, can be omitted
	encoding = 'UTF-8' //the default, can be omitted

	languages{
		
		mango {
			setup = 'io.pelle.mango.dsl.MangoStandaloneSetup'
			consumesJava = true
		}
	}
}

configurations {

	generatedServer
	generatedClientGWT
	generatedXml
	
	compile.extendsFrom(generatedClientGWT)
	compile.extendsFrom(generatedXml)
	compile.extendsFrom(generatedServer)
	
}

configurations.archives {
    extendsFrom configurations.generatedServer
	extendsFrom configurations.generatedClientGWT
	extendsFrom configurations.generatedXml
}


dependencies {
	
	xtextTooling project(':mango-dsl')
	xtextTooling project(':mango-db')
	xtextTooling project(':mango-server-base')
	
	compile project(':mango-db')
	compile project(':mango-server-base')
	project(':mango-dsl')
	
	testCompile project(path: ':mango-db', configuration: 'testArtifacts')
	
	// webservices
	generatedServer group: "org.springframework.ws", name: "spring-xml", version: "2.2.0.RELEASE"
	generatedServer group: "org.springframework.ws", name: "spring-ws-core", version: "2.2.0.RELEASE"
	generatedServer group: "wsdl4j", name: "wsdl4j", version: "1.6.3"
	generatedServer group: "org.apache.ws.xmlschema", name: "xmlschema-core", version: "2.1.0"

}

sourceSets {
	
	generatedClientGWT {
		java {
			srcDirs = [ 'src-gen-client-gwt' ]
		}
		resources {
			srcDirs = [ 'src-gen-client-gwt' ]
		}
		
		compileClasspath += project.sourceSets.main.compileClasspath
	}

	generatedServer {
		
		java {
			srcDirs = [ 'src-gen-server' ]
		}
		resources {
			srcDirs = [ 'src-gen-server' ]
		}
		
		compileClasspath += project.sourceSets.main.compileClasspath
		compileClasspath += project.sourceSets.generatedClientGWT.output
		compileClasspath += configurations.generatedServer
	}

	generatedXml {
		
		java {
			srcDirs = [ 'src-gen-xml' ]
		}
		resources {
			srcDirs = [ 'src-gen-xml' ]
		}
		
		compileClasspath += project.sourceSets.main.compileClasspath
		compileClasspath += project.sourceSets.generatedClientGWT.output
	}

	test {
		
		java {
			srcDirs = [ 'test', 'src-gen-server', 'src-gen-client-gwt', 'src-gen-xml' ]
		}
		resources {
			srcDirs = [ 'test', 'src-gen-server', 'src-gen-client-gwt', 'src-gen-xml' ]
		}
		
		compileClasspath += project.sourceSets.generatedServer.output

		compileClasspath += project.sourceSets.generatedClientGWT.output
		
		compileClasspath += project.sourceSets.generatedXml.output
	}

}

task generatedServerJar(type: Jar, dependsOn: compileGeneratedServerJava) {
	classifier 'server-generated'
	from sourceSets.generatedServer.output
}

task generatedServerSourceJar(type: Jar, dependsOn: compileGeneratedServerJava) {
	classifier 'server-generated-sources'
	from sourceSets.generatedServer.allSource
	exclude('**/persistence.xml')
}

task generatedClientGWTJar(type: Jar, dependsOn: project.compileGeneratedClientGWTJava) {
	classifier 'client-gwt-generated'
	from sourceSets.generatedClientGWT.output
}

task generatedClientGWTSourceJar(type: Jar, dependsOn: compileGeneratedClientGWTJava) {
	classifier 'client-gwt-generated-sources'
	from sourceSets.generatedClientGWT.allSource
}

task generatedXmlJar(type: Jar, dependsOn: project.compileGeneratedXmlJava) {
	classifier 'xml-generated'
	from sourceSets.generatedXml.output
}

task generatedXmlSourceJar(type: Jar, dependsOn: compileGeneratedXmlJava) {
	classifier 'xml-generated-sources'
	from sourceSets.generatedXml.allSource
}

signing {
	required { 
		isReleaseVersion
	}
	
	sign generatedServerJar,  generatedServerSourceJar, generatedClientGWTJar, generatedClientGWTSourceJar, generatedXmlJar, generatedXmlSourceJar
}

compileGeneratedServerJava.dependsOn("xtextGenerate")
processGeneratedServerResources.dependsOn("xtextGenerate")
compileGeneratedClientGWTJava.dependsOn("xtextGenerate")
processGeneratedClientGWTResources.dependsOn("xtextGenerate")
compileGeneratedXmlJava.dependsOn("xtextGenerate")
processGeneratedXmlResources.dependsOn("xtextGenerate")

build.onlyIf { !project.hasProperty('skipGenerate') }

artifacts {
	archives sourceJar, javadocJar
	generatedServer generatedServerJar, generatedServerSourceJar
	generatedClientGWT generatedClientGWTJar, generatedClientGWTSourceJar
	generatedXml generatedXmlJar, generatedXmlSourceJar
}

task clean.doLast {
    ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
        fileset(dir: "src-gen-client-gwt", includes: "**/*")
        fileset(dir: "src-gen-server", includes: "**/*")
        fileset(dir: "src-gen-xml", includes: "**/*")
    }
}